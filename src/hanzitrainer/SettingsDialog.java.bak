/*
 * SettingsDialog.java
 *
 * HanziTrainer to help you learn Mandarin
 * Copyright (c) 2008, Matthieu Jeanson ( matthieu.jeanson[at]gmail.com )
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * The name its contributors may not be used to endorse or promote
 *       products derived from this software without specific prior written
 *       permission.
 *
 * THIS SOFTWARE IS PROVIDED BY MATTHIEU JEANSON ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL MATTHIEU JEANSON BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package hanzitrainer;

import java.awt.Frame;
import java.io.File;
import java.util.ArrayList;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;

/**
 *
 * @author  matthieu
 */
public class SettingsDialog extends javax.swing.JDialog
{

    /** Creates new form SettingsDialog */
    public SettingsDialog(java.awt.Frame parent, CedictParser cedict, HanziDB hanzi, boolean modal)
    {
        super(parent, modal);

        parent_frame = parent;

        Preferences my_preferences;
        int randomness;
        String cedict_file;

        cedict_parser = cedict;
        main_database = hanzi;

        initComponents();

        my_preferences = Preferences.userNodeForPackage(HanziTrainerApp.class);
        randomness = my_preferences.getInt("randomness :", 50);
        RandomPickerSlider.setValue(randomness);
        RandomPickerValueLabel.setText(Integer.toString(randomness));

        cedict_file = my_preferences.get("cedict file :", "");
        CedictFileField.setText(cedict_file);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SettingsTitleLabel = new javax.swing.JLabel();
        RandomPickerLabel = new javax.swing.JLabel();
        RandomPickerSlider = new javax.swing.JSlider();
        RandomPickerValueLabel = new javax.swing.JLabel();
        CedictFileLabel = new javax.swing.JLabel();
        CedictFileField = new javax.swing.JTextField();
        CedictFileBrowseButton = new javax.swing.JButton();
        OKButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        ApplyButton = new javax.swing.JButton();
        CheckDBButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N


        CedictFileLabel.setText("Cedict file :"); // NOI18N
        CedictFileLabel.setName("CedictFileLabel"); // NOI18N

        CedictFileField.setText(""); // NOI18N
        CedictFileField.setName("CedictFileField"); // NOI18N
        CedictFileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CedictFileFieldActionPerformed(evt);
            }
        });

        CedictFileBrowseButton.setText("Browse..."); // NOI18N
        CedictFileBrowseButton.setName("CedictFileBrowseButton"); // NOI18N

        OKButton.setText("OK"); // NOI18N
        OKButton.setName("OKButton"); // NOI18N
        OKButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel"); // NOI18N
        CancelButton.setName("CancelButton"); // NOI18N
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        ApplyButton.setText("Apply"); // NOI18N
        ApplyButton.setName("ApplyButton"); // NOI18N
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        CheckDBButton.setText("Check DB"); // NOI18N
        CheckDBButton.setName("CheckDBButton"); // NOI18N
        if (cedict_parser.check_for_empty_db() == true)
        {
            CheckDBButton.setEnabled(false);
        }
        else
        {
            CheckDBButton.setEnabled(true);
        }
        CheckDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckDBButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CedictFileLabel)
                            .addComponent(RandomPickerLabel))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CedictFileField))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(RandomPickerSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RandomPickerValueLabel))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(CheckDBButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(CedictFileBrowseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(4, 4, 4))))
                    .addComponent(SettingsTitleLabel))
                .addContainerGap(122, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(286, Short.MAX_VALUE)
                .addComponent(ApplyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SettingsTitleLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RandomPickerValueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RandomPickerSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RandomPickerLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CedictFileLabel)
                    .addComponent(CedictFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CedictFileBrowseButton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OKButton)
                            .addComponent(CancelButton)
                            .addComponent(ApplyButton))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CheckDBButton)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void OKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButtonActionPerformed
    ApplyButtonActionPerformed(evt);

    this.setVisible(false);
}//GEN-LAST:event_OKButtonActionPerformed

private void CedictFileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CedictFileFieldActionPerformed
    int returnVal;

    if (CedictFileChooser == null)
    {
        CedictFileChooser = new javax.swing.JFileChooser();
    }
    returnVal = CedictFileChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION)
    {
        File file = CedictFileChooser.getSelectedFile();
        CedictFileField.setText(file.getPath());
    }
}//GEN-LAST:event_CedictFileFieldActionPerformed

private void RandomPickerSliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RandomPickerSliderMouseDragged
    int value = RandomPickerSlider.getValue();
    RandomPickerValueLabel.setText(Integer.toString(value));
}//GEN-LAST:event_RandomPickerSliderMouseDragged

private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CancelButtonActionPerformed
{//GEN-HEADEREND:event_CancelButtonActionPerformed
    this.setVisible(false);
}//GEN-LAST:event_CancelButtonActionPerformed

private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ApplyButtonActionPerformed
{//GEN-HEADEREND:event_ApplyButtonActionPerformed
    Preferences my_preferences;
    int value = RandomPickerSlider.getValue();
    String cedictFile;

    RandomPickerValueLabel.setText(Integer.toString(value));
    my_preferences = Preferences.userNodeForPackage(HanziTrainerApp.class);
    my_preferences.put("randomness :", Integer.toString(value));

    cedictFile = CedictFileField.getText();
    if (cedict_parser.Cedict_import(cedictFile) == 0)
    {
        my_preferences.put("cedict file :", cedictFile);
    }
}//GEN-LAST:event_ApplyButtonActionPerformed

    private class word_correcter implements CedictParser.checker_result
    {
        @Override
        public void handle_results(ArrayList<Integer> wrong_ids)
        {
            System.out.println("Show me the bad ids...");
            if (wrong_ids.size() != 0)
            {
                ArrayList<String> new_pinyins = new ArrayList<String>();
                for (int i = 0; i < wrong_ids.size(); i++)
                {
                    String chinese = main_database.get_word_details(wrong_ids.get(i)).get(0);
                    int cedict_id = cedict_parser.get_word_id(chinese);
                    new_pinyins.add(cedict_parser.get_word_details(cedict_id).get(1));
                }

                CedictDBCorrection correction_dialog = new CedictDBCorrection(parent_frame, true, main_database, wrong_ids, new_pinyins);
                correction_dialog.setVisible(true);
            }
        }
    }

private void CheckDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckDBButtonActionPerformed
    cedict_parser.check_local_db(main_database, new word_correcter());
}//GEN-LAST:event_CheckDBButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton CedictFileBrowseButton;
    private javax.swing.JTextField CedictFileField;
    private javax.swing.JLabel CedictFileLabel;
    private javax.swing.JButton CheckDBButton;
    private javax.swing.JButton OKButton;
    private javax.swing.JLabel RandomPickerLabel;
    private javax.swing.JSlider RandomPickerSlider;
    private javax.swing.JLabel RandomPickerValueLabel;
    private javax.swing.JLabel SettingsTitleLabel;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JFileChooser CedictFileChooser;
    private CedictParser cedict_parser;
    private HanziDB main_database;
    private Frame parent_frame;

    public static double random_low()
    {
        Preferences my_preferences;
        int randomness;
        double x = Math.random();

        my_preferences = Preferences.userNodeForPackage(HanziTrainerApp.class);
        randomness = my_preferences.getInt("randomness :", 100);

        return x * randomness / 100;
    }
}
